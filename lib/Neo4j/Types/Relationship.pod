# PODNAME: Neo4j::Types::Relationship
# ABSTRACT: Describes a relationship from a Neo4j graph

=encoding UTF-8

=head1 SYNOPSIS

 $rel_id   = $relationship->id;
 $rel_type = $relationship->type;
 
 $start_node_id = $relationship->start_id;
 $end_node_id   = $relationship->end_id;
 
 $property1  = $relationship->get('property1');
 $property2  = $relationship->get('property2');
 %properties = %{ $relationship->properties };

=head1 DESCRIPTION

Describes a relationship from a Neo4j graph. A relationship may
be created by executing a Cypher statement against a Neo4j database
server. Its description contains the relationship's properties as
well as certain meta data, all accessible by methods that
this class provides.

L<Neo4j::Types::Relationship> objects are typically not in a
one-to-one relation with relationships in a Neo4j graph. If the
same Neo4j relationship is fetched multiple times, then multiple
distinct L<Neo4j::Types::Relationship> objects may be created.
Refer to the documentation of the Perl module you use to
fetch relationships from the Neo4j database for information about
how that particular module handles this aspect.

=head1 METHODS

L<Neo4j::Types::Relationship> implements the following methods.

=head2 element_id

 $string = $node->element_id;

Return an ID string for this relationship that is unique within
a particular context, for example the current transaction.

The element ID string was introduced with Neo4j 5. When it is
unavailable, for example because this module is used with Neo4j
server S<version 4> or earlier, the behaviour of this method is
undefined. However, as of early 2023, the common approach is to
simply yield the S<numeric ID> instead; see L<C<id()>|/"id">.
Note that a S<numeric ID> cannot successfully be used with
C<elementId()> in Cypher expressions.

Neo4j relationship IDs are not designed to be persistent.
As such, if you want a public identity to use for your
relationships, attaching an explicit "id" property is a
better choice than using the Neo4j relationship ID.

=head2 get

 $value = $relationship->get('property_key');

Retrieve the value of this relationship's property with the given
key. If no such key exists, return C<undef>.

=head2 id

 $number = $relationship->id;

Return a legacy numeric ID for this relationship that is
unique within a particular context, for example the
current transaction.

Neo4j 5 has B<deprecated> numeric IDs. They may become
unavailable in future. The behaviour of this method for
this situation is undefined; implementations may yield
an undefined value with or without warning or C<die>.

Neo4j relationship IDs are not designed to be persistent.
As such, if you want a public identity to use for your
relationships, attaching an explicit "id" property is a
better choice than using the Neo4j relationship ID.

Legacy IDs are always integer numbers.
A relationship with the ID C<0> may exist.
Nodes and relationships do not share the same ID space.

=head2 properties

 $hashref = $relationship->properties;
 $value = $hashref->{property_key};

Return all properties of this relationship as a hash reference.

=head2 start_element_id

 $string = $relationship->start_element_id;

Return an element ID for the node where this relationship starts.
See L<Neo4j::Types::Node/"element_id">.

=head2 start_id

 $number = $relationship->start_id;

Return a numeric ID for the node where this relationship starts.
See L<Neo4j::Types::Node/"id">.

=head2 end_element_id

 $string = $relationship->end_element_id;

Return an element ID for the node where this relationship ends.
See L<Neo4j::Types::Node/"element_id">.

=head2 end_id

 $number = $relationship->end_id;

Return a numeric ID for the node where this relationship ends.
See L<Neo4j::Types::Node/"id">.

=head2 type

 $type = $relationship->type;

Return the type of this relationship.

=head1 BUGS

The effect of making changes to the contents of the hash
to which a reference is returned from the C<properties()>
method has not yet been defined.

=head1 SEE ALSO

=over

=item * L<Neo4j::Types::B<Node>>

=item * L<Neo4j::Types::ImplementorNotes/"Relationship">

=item * L<Neo4j::Bolt::Relationship>

=item * L<Neo4j::Driver::Type::Relationship>

=item * L<REST::Neo4p::Relationship>

=item * L<"Structural types" in Neo4j Cypher Manual|https://neo4j.com/docs/cypher-manual/5/values-and-types/property-structural-constructed/#structural-types>

=back
